require('dotenv').config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv

// === üì¶ –ò–º–ø–æ—Ä—Ç—ã ===
const express = require('express');
const cors = require('cors');
const bcrypt = require('bcrypt');
const mysql = require('mysql2/promise');
const jwt = require('jsonwebtoken');  // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞

const path = require('path'); // –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
const multer = require('multer');

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, 'uploads'));
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const extension = path.extname(file.originalname);
    cb(null, file.fieldname + '-' + uniqueSuffix + extension);
  }
});

const upload = multer({ storage: storage });

const app = express();
app.use(cors());
app.use(express.json());

const http = require('http');
const { Server } = require('socket.io');
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: 'http://localhost:8080', // –ø–æ—Ä—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    methods: ['GET', 'POST']
  }
});

io.on('connection', (socket) => {
  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω');

  socket.on('joinRoom', (roomId) => {
    socket.join(roomId);
  });

  socket.on('sendMessage', ({ message, room }) => {
    io.to(room).emit('receiveMessage', message);
  });

  socket.on('leaveRoom', (roomId) => {
    socket.leave(roomId);
  });

  socket.on('disconnect', () => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω');
  });
});

// === üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL ===
const pool = mysql.createPool({
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'writehub',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});


// === –†–æ—É—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–Ω–∞ ===


// –†–æ—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
app.post('/api/auth/register', async (req, res) => {
  const { username, email, password } = req.body;

  if (!username || !email || !password) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const connection = await pool.getConnection();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [existingUser] = await connection.execute('SELECT * FROM users WHERE email = ?', [email]);
    if (existingUser.length > 0) {
      connection.release();
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await connection.execute(
      'INSERT INTO users (username, email, password) VALUES (?, ?, ?)',
      [username, email, hashedPassword]
    );

    connection.release();
    return res.status(201).json({ message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞' });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// –†–æ—É—Ç –¥–ª—è –ª–æ–≥–∏–Ω–∞
app.post('/api/auth/login', async (req, res) => {
  const { login, password } = req.body;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const [user] = await pool.query('SELECT * FROM users WHERE email = ? OR username = ?', [login, login]);
    if (user.length === 0 || user[0].password !== password) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, JWT) –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Ç–≤–µ—Ç
    const token = generateAuthToken(user[0].id); // —Å–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω —Å user_id
    res.status(200).json({
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      token,
      user_id: user[0].id,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º user_id –≤ –æ—Ç–≤–µ—Ç–µ
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }
});


// === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ===
const authenticate = (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  }

  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // userId –∏–∑ —Ç–æ–∫–µ–Ω–∞
    next();
  } catch (err) {
    return res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
};


app.get('/api/profile', authenticate, async (req, res) => {
  try {
    const connection = await pool.getConnection();
    const [user] = await connection.execute(
      'SELECT username, email, full_name, bio, profile_image, vk_id, telegram_id FROM users WHERE id = ?',
      [req.user.userId]
    );
    connection.release();

    if (user.length === 0) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json(user[0]);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.put('/api/profile', authenticate, async (req, res) => {
  const { full_name, email, bio, website } = req.body;

  try {
    const connection = await pool.getConnection();
    await connection.execute(
      'UPDATE users SET full_name = ?, email = ?, bio = ?, profile_image = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
      [full_name, email, bio, website, req.user.userId]
    );
    connection.release();

    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


app.post('/api/profile/avatar', authenticate, upload.single('avatar'), async (req, res) => {
  const imagePath = `/uploads/${req.file.filename}`;

  try {
    const connection = await pool.getConnection();
    await connection.execute(
      'UPDATE users SET profile_image = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
      [imagePath, req.user.userId]
    );
    connection.release();

    res.json({ imageUrl: imagePath });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// === –†–æ—É—Ç—ã –¥–ª—è —Å—Ç–∞—Ç–µ–π ===

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
app.post('/api/articles', async (req, res) => {
  const { title, content, excerpt, cover_image, status, owner_id, tags = [], scheduled_publish_time } = req.body;

  if (!title || !content || !owner_id) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const connection = await pool.getConnection();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
    let formattedDate = null;
    if (scheduled_publish_time) {
      const date = new Date(scheduled_publish_time);
      formattedDate = date.toISOString().slice(0, 19).replace('T', ' ');
    }

    // –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É articles
    const [articleResult] = await connection.execute(
      'INSERT INTO articles (title, content, excerpt, cover_image, status, owner_id, scheduled_publish_time) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [
        title,
        content,
        excerpt ?? null,
        cover_image ?? null,
        status || 'draft',
        owner_id,
        formattedDate
      ]
    );

    const articleId = articleResult.insertId;

    // –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å —Å—Ç–∞—Ç—å–µ–π
    if (tags.length > 0) {
      const tagPromises = tags.map(tagId =>
        connection.execute('INSERT INTO article_tags (article_id, tag_id) VALUES (?, ?)', [articleId, tagId])
      );
      await Promise.all(tagPromises);
    }

    // –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏ –≤ article_versions
    await connection.execute(
      'INSERT INTO article_versions (article_id, content, modified_by, version_number) VALUES (?, ?, ?, ?)',
      [articleId, content, owner_id, 1]
    );

    connection.release();
    return res.status(201).json({ message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', articleId });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
app.get('/api/articles', async (req, res) => {
  try {
    const connection = await pool.getConnection();
    const [articles] = await connection.execute('SELECT * FROM articles');
    connection.release();
    return res.json(articles);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ ID
app.get('/api/articles/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const connection = await pool.getConnection();
    const [article] = await connection.execute('SELECT * FROM articles WHERE id = ?', [id]);

    if (article.length === 0) {
      connection.release();
      return res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —Å—Ç–∞—Ç—å–∏
    const [tags] = await connection.execute('SELECT tag_id FROM article_tags WHERE article_id = ?', [id]);

    connection.release();
    return res.json({ ...article[0], tags });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
// === üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π ===
async function publishScheduledArticles() {
  try {
    const connection = await pool.getConnection();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –∏–ª–∏ —Ä–∞–Ω–µ–µ
    const [articles] = await connection.execute(
      'SELECT id FROM articles WHERE status = "scheduled" AND scheduled_publish_time <= NOW()'
    );

    // –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é
    for (const article of articles) {
      await connection.execute(
        'UPDATE articles SET status = "published" WHERE id = ?',
        [article.id]
      );
      console.log(`üóìÔ∏è –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è —Å ID: ${article.id}`);
    }

    connection.release();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:', err);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(publishScheduledArticles, 60000);

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
app.put('/api/articles/:id', async (req, res) => {
  const { id } = req.params;
  const { title, content, excerpt, cover_image, status, tags = [], scheduled_publish_time } = req.body;

  if (!title || !content) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const connection = await pool.getConnection();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
    let formattedDate = null;
    if (scheduled_publish_time) {
      const date = new Date(scheduled_publish_time);
      formattedDate = date.toISOString().slice(0, 19).replace('T', ' ');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    await connection.execute(
      'UPDATE articles SET title = ?, content = ?, excerpt = ?, cover_image = ?, status = ?, scheduled_publish_time = ? WHERE id = ?',
      [title, content, excerpt, cover_image, status, formattedDate, id]
    );

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π —Å—Ç–∞—Ç—å–∏
    const [article] = await connection.execute('SELECT * FROM articles WHERE id = ?', [id]);
    if (article.length > 0) {
      // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å—Ç–∞—Ç—å–∏
      const [versionResult] = await connection.execute(
        'SELECT MAX(version_number) as max_version FROM article_versions WHERE article_id = ?',
        [id]
      );
      const lastVersion = versionResult[0].max_version || 0;
      const newVersionNumber = lastVersion + 1;

      await connection.execute(
        'INSERT INTO article_versions (article_id, content, modified_by, version_number) VALUES (?, ?, ?, ?)',
        [id, content, article[0].owner_id, newVersionNumber]
      );
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ —Å—Ç–∞—Ç—å–∏
    await connection.execute('DELETE FROM article_tags WHERE article_id = ?', [id]);
    if (tags.length > 0) {
      const tagPromises = tags.map(tagId =>
        connection.execute('INSERT INTO article_tags (article_id, tag_id) VALUES (?, ?)', [id, tagId])
      );
      await Promise.all(tagPromises);
    }

    connection.release();
    return res.status(200).json({ message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ ID
app.get('/shared-article/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const connection = await pool.getConnection();
    const [article] = await connection.execute('SELECT * FROM articles WHERE id = ?', [id]);

    if (article.length === 0) {
      connection.release();
      return res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —Å—Ç–∞—Ç—å–∏
    const [tags] = await connection.execute('SELECT tag_id FROM article_tags WHERE article_id = ?', [id]);

    connection.release();
    return res.json({ ...article[0], tags });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
app.get('/api/tags', async (req, res) => {
  try {
    const connection = await pool.getConnection();
    const [tags] = await connection.execute('SELECT id, name FROM tags');
    connection.release();
    return res.json(tags);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});


const { v4: uuidv4 } = require('uuid'); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: npm install uuid

// üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç—å–µ
// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç—å–µ
app.post('/api/articles/:id/share', async (req, res) => {
  const { id } = req.params;
  const { permission_level = 'edit', expires_days = 7 } = req.body; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ 7 –¥–Ω–µ–π

  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }

  const token = authHeader.split(' ')[1];
  let userId;

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    userId = decoded.userId;
  } catch (err) {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }

  try {
    const connection = await pool.getConnection();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    const [article] = await connection.execute('SELECT * FROM articles WHERE id = ?', [id]);
    if (article.length === 0) {
      connection.release();
      return res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å—Ç–∞—Ç—å–∏
    if (article[0].owner_id !== userId) {
      connection.release();
      return res.status(403).json({ message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    const shareId = uuidv4();

    // –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + expires_days);
    const formattedExpiresAt = expiresAt.toISOString().slice(0, 19).replace('T', ' ');

    await connection.execute(
      'INSERT INTO share_links (id, article_id, created_by, permission_level, expires_at) VALUES (?, ?, ?, ?, ?)',
      [shareId, id, userId, permission_level, formattedExpiresAt]
    );

    connection.release();

    let shareUrl;
    if (permission_level === 'edit') {
      shareUrl = `http://localhost:8080/edit/${id}?share=${shareId}`;
    } else {
      shareUrl = `http://localhost:8080/view/${id}?share=${shareId}`;
    }

    return res.status(201).json({
      shareId,
      shareUrl,
      expiresAt,
      permission_level
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});


// üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—å–∏
app.get('/api/articles/share/:shareId', async (req, res) => {
  const { shareId } = req.params;

  try {
    const connection = await pool.getConnection();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    const [shareLink] = await connection.execute(
      'SELECT s.*, a.title, a.content, a.owner_id FROM share_links s JOIN articles a ON s.article_id = a.id WHERE s.id = ? AND (s.expires_at IS NULL OR s.expires_at > NOW())',
      [shareId]
    );

    if (shareLink.length === 0) {
      connection.release();
      return res.status(404).json({ message: '–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ —Å—Ç–∞—Ç—å–∏
    const [tags] = await connection.execute(
      'SELECT t.id, t.name FROM tags t JOIN article_tags at ON t.id = at.tag_id WHERE at.article_id = ?',
      [shareLink[0].article_id]
    );

    connection.release();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
    const articleData = {
      id: shareLink[0].article_id,
      title: shareLink[0].title,
      content: shareLink[0].content,
      owner_id: shareLink[0].owner_id,
      tags: tags.map(tag => ({ id: tag.id, name: tag.name })),
      permission_level: shareLink[0].permission_level,
      expires_at: shareLink[0].expires_at
    };

    return res.status(200).json({
      valid: true,
      article: articleData
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});

// üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
app.put('/api/articles/:id/shared/:shareId', async (req, res) => {
  const { id, shareId } = req.params;
  const { title, content, tags = [] } = req.body;

  try {
    const connection = await pool.getConnection();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const [shareLink] = await connection.execute(
      'SELECT * FROM share_links WHERE id = ? AND article_id = ? AND permission_level = "edit" AND (expires_at IS NULL OR expires_at > NOW())',
      [shareId, id]
    );

    if (shareLink.length === 0) {
      connection.release();
      return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    const [article] = await connection.execute('SELECT * FROM articles WHERE id = ?', [id]);

    if (article.length === 0) {
      connection.release();
      return res.status(404).json({ message: '–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
    await connection.execute(
      'UPDATE articles SET title = ?, content = ?, updated_at = NOW() WHERE id = ?',
      [title, content, id]
    );

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏ —Å—Ç–∞—Ç—å–∏
    const [versionResult] = await connection.execute('SELECT MAX(version_number) as max_version FROM article_versions WHERE article_id = ?', [id]);
    const currentVersion = versionResult[0].max_version || 0;
    const newVersionNumber = currentVersion + 1;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    await connection.execute(
      'INSERT INTO article_versions (article_id, content, modified_by, version_number) VALUES (?, ?, ?, ?)',
      [id, content, shareLink[0].created_by, newVersionNumber]
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ —Å—Ç–∞—Ç—å–∏
    await connection.execute('DELETE FROM article_tags WHERE article_id = ?', [id]);
    if (tags.length > 0) {
      const tagPromises = tags.map(tagId =>
        connection.execute('INSERT INTO article_tags (article_id, tag_id) VALUES (?, ?)', [id, tagId])
      );
      await Promise.all(tagPromises);
    }

    connection.release();
    return res.status(200).json({ message: '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ —Å—Å—ã–ª–∫–µ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:', err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err.message });
  }
});


// === –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π ===
app.get('/ideas', async (req, res) => {
  try {
    const [ideas] = await pool.query(`
      SELECT i.*, 
             COALESCE(SUM(CASE WHEN iv.vote_type = 'upvote' THEN 1 ELSE 0 END), 0) AS votes
      FROM ideas i
      LEFT JOIN idea_votes iv ON i.id = iv.idea_id
      WHERE i.status = "open"
      GROUP BY i.id
      ORDER BY votes DESC
    `);
    res.json(ideas);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–¥–µ–π' });
  }
});


// === –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–¥–µ–∏ ===
app.post('/ideas', async (req, res) => {
  const { title, description, user_id } = req.body;

  if (!title || !description || !user_id) {
    return res.status(400).json({ message: '–ó–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id
    const [user] = await pool.query('SELECT id FROM users WHERE id = ?', [user_id]);

    if (user.length === 0) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∏–¥–µ–∏
    const [result] = await pool.query(
      'INSERT INTO ideas (title, description, user_id, status) VALUES (?, ?, ?, "open")',
      [title, description, user_id]
    );
    
    res.status(201).json({ message: '–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', ideaId: result.insertId });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏' });
  }
});


// === üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
const PORT = process.env.PORT || 5000;
server.listen(5000, () => {
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000');
});